#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2014-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import glob
import http.client
import os
import pwd
import random
import shlex
import subprocess
import sys
import threading
import time

import netifaces

import keyboardleds

type(0_0)  # Python >= 3.6 is required

def msg_start(msg):
    print(msg, end=': ')
    sys.stdout.flush()

def msg_ping():
    print('.', end='')
    sys.stdout.flush()

def msg_end(msg):
    print(msg)
    sys.stdout.flush()

def msg_now():
    now = datetime.datetime.now().replace(microsecond=0)
    msg_start('timestamp')
    msg_end(str(now))

def run(cmdline):
    shell = isinstance(cmdline, str)
    subprocess.check_call(cmdline, shell=shell)

def update_resolv_conf():
    path = '/proc/{pid}/ns/mnt'
    assert not os.path.samefile(
        path.format(pid=1),
        path.format(pid=os.getpid()),
    )
    run('mount --bind /etc/ppp/resolv.conf /etc/resolv.conf')

def pgrep(command):
    for procdir in glob.glob('/proc/[0-9]*'):
        try:
            with open(procdir + '/cmdline', 'r') as file:
                pcmdline = file.read()
        except OSError:
            continue
        pcommand = pcmdline.split('\0', 1)[0]
        if pcommand == command:
            return True
    return None

def usb_modeswitch(modem_device):
    msg_start('modem device')
    if not os.path.exists(modem_device):
        run('udevadm trigger --action=add --subsystem-match usb')
        while not os.path.exists(modem_device):
            msg_ping()
            time.sleep(1)
        msg_ping()
        time.sleep(1)
    assert os.path.exists(modem_device)
    msg_end(modem_device)

def net_down(iface):
    msg_start('bringing network down')
    run('nsenter -t 1 -m ifdown'.split() + [iface])
    msg_ping()
    while pgrep('/usr/bin/wvdial'):
        time.sleep(1)
        msg_ping()
    msg_end('done')

def net_up(iface):
    msg_start('bringing network up')
    run('nsenter -t 1 -m ifup'.split() + [iface])
    msg_ping()
    for i in range(15):
        try:
            netifaces.ifaddresses('ppp0')[netifaces.AF_INET]
        except (KeyError, ValueError):
            pass
        else:
            break
        time.sleep(1)
        msg_ping()
    else:
        msg_end('FAILED')
        return
    msg_end('done')

def abdicate(cmdline):
    user = os.environ['SUDO_USER']
    userinfo = pwd.getpwnam(user)
    uid = userinfo.pw_uid
    gid = userinfo.pw_gid
    def switch_user():
        os.setgroups([])
        os.setgid(gid)
        os.setuid(uid)
    subprocess.check_call(cmdline, preexec_fn=switch_user)

def terror():
    msg_start('checking network')
    while True:
        msg_ping()
        try:
            conn = http.client.HTTPConnection('www.example.org')
            conn.request('HEAD', '/')
            response = conn.getresponse()
        except ConnectionError:
            time.sleep(0.5 + random.random())
            continue
        is_terror = (
            response.status == 302 and
            response.getheader('Location').startswith('http://bdi.')
        )
        msg_end('captcha redirect' if is_terror else 'ok')
        return is_terror

class Blinker(threading.Thread):

    def __init__(self, keyboard_device):
        threading.Thread.__init__(self)
        self.event = threading.Event()
        self.led = keyboardleds.LedKit(keyboard_device).caps_lock

    def __enter__(self):
        self.start()
        return self

    def __exit__(self, tp, exc, tb):
        self.stop()

    def run(self):
        i = 0
        while True:
            i += 1
            if self.event.is_set():
                break
            if i % 2:
                self.led.set()
                self.event.wait(2.5)
            else:
                self.led.reset()
                self.event.wait(0.5)
        self.led.reset()

    def stop(self):
        self.event.set()

private_ns_token = 'AERO2_MANAGER_PRIVATE_NS'

def main():
    ap = argparse.ArgumentParser()
    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue9694
        ap._optionals.title = 'options'
    default_iface = 'ppp-aero2'
    ap.add_argument('--iface', metavar='IFACE', default=default_iface, help=
        f'ifupdown interface name (default: {default_iface})'
    )
    ap.add_argument('--modem-dev', metavar='PATH', help=
        'run "udevadm trigger" if this device doesn\'t exist; '
        'this might be needed when usb-modeswitch is misbehaving'
    )
    default_keyboard_dev = '/dev/input/by-path/platform-i8042-serio-0-event-kbd'
    ap.add_argument('--keyboard-dev', metavar='PATH', default=default_keyboard_dev, help=
        'use this input device for LED blinking '
        f'(default: {default_keyboard_dev})'
    )
    def ap_cmdline(s):
        return shlex.split(s)
    ap_cmdline.__name__ = 'command-line'
    ap.add_argument('--abdicate', dest='abdicate_cmd', metavar='CMDLINE', type=ap_cmdline,
        default='abdicate', help='command line for abdicate'
    )
    options = ap.parse_args()
    prefix = []
    if os.getuid() != 0:
        prefix += ['sudo', '-E', '-u', 'root']
    if private_ns_token not in os.environ:
        os.environ[private_ns_token] = '1'
        prefix += ['unshare', '-m']
    if prefix:
        os.execvp(prefix[0], prefix + [sys.executable, __file__] + sys.argv[1:])
    update_resolv_conf()
    if options.modem_dev is not None:
        usb_modeswitch(options.modem_dev)
    last_address = None
    while True:
        try:
            address = netifaces.ifaddresses('ppp0')
            [address] = address[netifaces.AF_INET]
            address = address['addr']
        except (KeyError, ValueError):
            address = None
        if address is None:
            net_down(options.iface)
            net_up(options.iface)
            continue
        if address != last_address:
            msg_start('IP')
            msg_end(address)
            last_address = address
            if terror():
                with Blinker(options.keyboard_dev) as blinker:
                    abdicate(options.abdicate_cmd)
                if terror():
                    net_down(options.iface)
                    net_up(options.iface)
                    last_address = None
                blinker.join()
                msg_now()
                continue
        time.sleep(1 + random.random())

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
